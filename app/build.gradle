plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.ml.question"
        minSdkVersion 24
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file("${project.rootDir.absolutePath}/keystore.keystore")
            storePassword '494ca1bcd82b0a8c4e74593acc69fafa'
            keyAlias 'lm'
            keyPassword '494ca1bcd82b0a8c4e74593acc69fafa'
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }
    buildTypes {
        release {
            // Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource
            shrinkResources true
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            // Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource
            shrinkResources true
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        //dataBinding = true
        // for view binding :
        viewBinding = true
    }
    /*Gradle3.3 以上的方法 自定义输出路径以及名字*/
    applicationVariants.all { variant ->
        def outputFileDir = "${project.projectDir.absolutePath}/${variant.buildType.name}/${variant.flavorName}/${variant.versionName}"
        println("生成目录: $outputFileDir  root:${project.rootDir.absolutePath}")

//        if (variant.buildType.name == "release"&&variant.flavorName == "online") {
//            println("outputDirectory1:${variant.getPackageApplicationProvider().get().outputDirectory}")
//            variant.getPackageApplicationProvider().get().outputDirectory = new File(outputFileDir)
//        }
        //variant.getPackageApplicationProvider().get().outputDirectory = new File("build/outputs/apk/${variant.flavorName}/${variant.buildType.name}/${variant.versionName}")
        println("outputDirectory2:${variant.getPackageApplicationProvider().get().outputDirectory} ")

        def today = new Date()
        println(" project.name:${project.name} rootProject.name:${rootProject.name} ")
        def path = ((project.name != "app") ? project.name : rootProject.name.replace(" ","")) + "_" +
                variant.flavorName + "_" +
                variant.buildType.name + "_"+
                variant.versionName + "_" +
                today.format('yyyyMMddhhmm') +
                ".apk"
        println(" project.gradle.gradleVersion:${project.gradle.gradleVersion} path:$path")
        /**
         *  gradleVersion 小于4.0
         */
        /*  variant.getPackageApplicationProvider().get().outputScope.apkDatas.forEach { apkData ->
              apkData.outputFileName = path
          }*/
        /*      *//**
         *  gradleVersion 大于4.0
         *//*
        variant.outputs.forEach {
            it.apkData.outputFileName = path
        }*/
        /**
         *  gradleVersion 大于4.1
         */
        variant.outputs.forEach {
            it.outputFileName = path
        }

        variant.assemble.doLast {
            File out = new File(outputFileDir)
            copy {
                from variant.mappingFile
                into  out
                rename {
                    String fileName -> "${variant.buildType.name}-${variant.flavorName}-mapping-${variant.versionName}.txt"
                }
                variant.outputs.forEach{ file->
                    copy{
                        from file.outputFile
                        into out
                    }
                }
            }
        }
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}